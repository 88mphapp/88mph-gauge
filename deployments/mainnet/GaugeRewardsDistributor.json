{
  "address": "0x362A1844be1209073Fa31561c5c1d6D893255B42",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_curator_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reward_token_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge_controller_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_global_emission_rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "distibutions_state",
          "type": "bool"
        }
      ],
      "name": "DistributionsToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "gauge_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "is_middleman",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "is_active",
          "type": "bool"
        }
      ],
      "name": "GaugeStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerNominated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoveredERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward_amount",
          "type": "uint256"
        }
      ],
      "name": "RewardDistributed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curator_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gauge_address",
          "type": "address"
        }
      ],
      "name": "currentReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gauge_address",
          "type": "address"
        }
      ],
      "name": "distributeReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weeks_elapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_tally",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionsOn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gauge_controller",
      "outputs": [
        {
          "internalType": "contract IGaugeController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gauge_whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "global_emission_rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "is_middleman",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "last_time_gauge_paid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "nominateNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nominatedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward_token_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_new_curator_address",
          "type": "address"
        }
      ],
      "name": "setCurator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge_controller_address",
          "type": "address"
        }
      ],
      "name": "setGaugeController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_is_middleman",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_is_active",
          "type": "bool"
        }
      ],
      "name": "setGaugeState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_global_emission_rate",
          "type": "uint256"
        }
      ],
      "name": "setGlobalEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_new_timelock",
          "type": "address"
        }
      ],
      "name": "setTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelock_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleDistributions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9628dc80d11d765fa5595ba8c33a61a1418a468c9fd6aa9c1af9df56cf156ceb",
  "receipt": {
    "to": null,
    "from": "0x000000004b60a12164e6942dCd3e007F079b725B",
    "contractAddress": "0x362A1844be1209073Fa31561c5c1d6D893255B42",
    "transactionIndex": 95,
    "gasUsed": "1475196",
    "logsBloom": "0x00000000000000000000000008000000000000000000000000080000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1593d76c6ba4066886982866b1eb807eff4c7489e2677b0afa5f2f67c564ea31",
    "transactionHash": "0x9628dc80d11d765fa5595ba8c33a61a1418a468c9fd6aa9c1af9df56cf156ceb",
    "logs": [
      {
        "transactionIndex": 95,
        "blockNumber": 15260922,
        "transactionHash": "0x9628dc80d11d765fa5595ba8c33a61a1418a468c9fd6aa9c1af9df56cf156ceb",
        "address": "0x362A1844be1209073Fa31561c5c1d6D893255B42",
        "topics": [
          "0xb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056f34826cc63151f74fa8f701e4f73c5eaae52ad",
        "logIndex": 183,
        "blockHash": "0x1593d76c6ba4066886982866b1eb807eff4c7489e2677b0afa5f2f67c564ea31"
      }
    ],
    "blockNumber": 15260922,
    "cumulativeGasUsed": "11642701",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x56f34826Cc63151f74FA8f701E4f73C5EAae52AD",
    "0x90523c113517A59f6BEBC123b75612Aea9FD3140",
    "0xfecBad5D60725EB6fd10f8936e02fa203fd27E4b",
    "0x8888801aF4d980682e47f1A9036e589479e835C5",
    "0x16dff045De4421E836A42FC2e98d4Ec9015bd470",
    0
  ],
  "numDeployments": 2,
  "solcInputHash": "024a35284e104ed8092caf64de90af06",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curator_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reward_token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge_controller_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_global_emission_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"distibutions_state\",\"type\":\"bool\"}],\"name\":\"DistributionsToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gauge_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"is_middleman\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"is_active\",\"type\":\"bool\"}],\"name\":\"GaugeStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward_amount\",\"type\":\"uint256\"}],\"name\":\"RewardDistributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curator_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge_address\",\"type\":\"address\"}],\"name\":\"currentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge_address\",\"type\":\"address\"}],\"name\":\"distributeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weeks_elapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_tally\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionsOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge_controller\",\"outputs\":[{\"internalType\":\"contract IGaugeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gauge_whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"global_emission_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is_middleman\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"last_time_gauge_paid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward_token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_curator_address\",\"type\":\"address\"}],\"name\":\"setCurator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge_controller_address\",\"type\":\"address\"}],\"name\":\"setGaugeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_is_middleman\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_is_active\",\"type\":\"bool\"}],\"name\":\"setGaugeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_global_emission_rate\",\"type\":\"uint256\"}],\"name\":\"setGlobalEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleDistributions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gauge/GaugeRewardsDistributor.sol\":\"GaugeRewardsDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/Gauge/GaugeRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {ReentrancyGuard} from \\\"solmate/src/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./IGaugeController.sol\\\";\\nimport {MiddlemanGauge} from \\\"./MiddlemanGauge.sol\\\";\\nimport \\\"../Staking/Owned.sol\\\";\\n\\ncontract GaugeRewardsDistributor is Owned, ReentrancyGuard {\\n    using SafeTransferLib for ERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // Instances and addresses\\n    address public immutable reward_token_address;\\n    IGaugeController public gauge_controller;\\n\\n    // Admin addresses\\n    address public timelock_address;\\n    address public curator_address;\\n\\n    // Constants\\n    uint256 private constant MULTIPLIER_PRECISION = 1e18;\\n    uint256 private constant ONE_WEEK = 604800;\\n\\n    // Gauge controller related\\n    mapping(address => bool) public gauge_whitelist;\\n    mapping(address => bool) public is_middleman; // For cross-chain farms, use a middleman contract to push to a bridge\\n    mapping(address => uint256) public last_time_gauge_paid;\\n\\n    // Booleans\\n    bool public distributionsOn;\\n\\n    // Uints\\n    uint256 public global_emission_rate;\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyByOwnGov() {\\n        require(\\n            msg.sender == owner || msg.sender == timelock_address,\\n            \\\"Not owner or timelock\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyByOwnerOrCuratorOrGovernance() {\\n        require(\\n            msg.sender == owner ||\\n                msg.sender == curator_address ||\\n                msg.sender == timelock_address,\\n            \\\"Not owner, curator, or timelock\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isDistributing() {\\n        require(distributionsOn == true, \\\"Distributions are off\\\");\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _owner,\\n        address _timelock_address,\\n        address _curator_address,\\n        address _reward_token_address,\\n        address _gauge_controller_address,\\n        uint256 _global_emission_rate\\n    ) Owned(_owner) {\\n        curator_address = _curator_address;\\n        timelock_address = _timelock_address;\\n\\n        reward_token_address = _reward_token_address;\\n        gauge_controller = IGaugeController(_gauge_controller_address);\\n\\n        distributionsOn = true;\\n\\n        global_emission_rate = _global_emission_rate;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    // Current weekly reward amount\\n    function currentReward(address gauge_address)\\n        public\\n        view\\n        returns (uint256 reward_amount)\\n    {\\n        uint256 rel_weight = gauge_controller.gauge_relative_weight(\\n            gauge_address,\\n            block.timestamp\\n        );\\n        uint256 rwd_rate = (global_emission_rate * rel_weight) / 1e18;\\n        reward_amount = rwd_rate * ONE_WEEK;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    // Callable by anyone\\n    function distributeReward(address gauge_address)\\n        public\\n        isDistributing\\n        nonReentrant\\n        returns (uint256 weeks_elapsed, uint256 reward_tally)\\n    {\\n        require(gauge_whitelist[gauge_address], \\\"Gauge not whitelisted\\\");\\n\\n        // Calculate the elapsed time in weeks.\\n        uint256 last_time_paid = last_time_gauge_paid[gauge_address];\\n\\n        // Edge case for first reward for this gauge\\n        if (last_time_paid == 0) {\\n            weeks_elapsed = 1;\\n        } else {\\n            // Truncation desired\\n            weeks_elapsed =\\n                (block.timestamp - last_time_gauge_paid[gauge_address]) /\\n                ONE_WEEK;\\n\\n            // Return early here for 0 weeks instead of throwing, as it could have bad effects in other contracts\\n            if (weeks_elapsed == 0) {\\n                return (0, 0);\\n            }\\n        }\\n\\n        // NOTE: This will always use the current global_emission_rate()\\n        reward_tally = 0;\\n        for (uint256 i = 0; i < (weeks_elapsed); i++) {\\n            uint256 rel_weight_at_week;\\n            if (i == 0) {\\n                // Mutative, for the current week. Makes sure the weight is checkpointed. Also returns the weight.\\n                rel_weight_at_week = gauge_controller\\n                    .gauge_relative_weight_write(\\n                        gauge_address,\\n                        block.timestamp\\n                    );\\n            } else {\\n                // View\\n                rel_weight_at_week = gauge_controller.gauge_relative_weight(\\n                    gauge_address,\\n                    block.timestamp - (ONE_WEEK * i)\\n                );\\n            }\\n            uint256 rwd_rate_at_week = (global_emission_rate *\\n                rel_weight_at_week) / 1e18;\\n            reward_tally = reward_tally + rwd_rate_at_week * ONE_WEEK;\\n        }\\n\\n        // Update the last time paid\\n        last_time_gauge_paid[gauge_address] = block.timestamp;\\n\\n        if (is_middleman[gauge_address]) {\\n            // Cross chain: Pay out the rewards to the middleman contract\\n            // Approve for the middleman first\\n            ERC20(reward_token_address).approve(gauge_address, reward_tally);\\n\\n            // Trigger the middleman\\n            MiddlemanGauge(gauge_address).pullAndBridge(reward_tally);\\n        } else {\\n            // Mainnet: Pay out the rewards directly to the gauge\\n            ERC20(reward_token_address).safeTransfer(\\n                gauge_address,\\n                reward_tally\\n            );\\n        }\\n\\n        emit RewardDistributed(gauge_address, reward_tally);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS - Curator / migrator callable ========== */\\n\\n    // For emergency situations\\n    function toggleDistributions() external onlyByOwnerOrCuratorOrGovernance {\\n        distributionsOn = !distributionsOn;\\n\\n        emit DistributionsToggled(distributionsOn);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS - Owner or timelock only ========== */\\n\\n    // Added to support recovering LP Rewards and other mistaken tokens from other systems to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n        external\\n        onlyByOwnGov\\n    {\\n        // Only the owner address can ever receive the recovery withdrawal\\n        ERC20(tokenAddress).safeTransfer(owner, tokenAmount);\\n        emit RecoveredERC20(tokenAddress, tokenAmount);\\n    }\\n\\n    function setGaugeState(\\n        address _gauge_address,\\n        bool _is_middleman,\\n        bool _is_active\\n    ) external onlyByOwnGov {\\n        is_middleman[_gauge_address] = _is_middleman;\\n        gauge_whitelist[_gauge_address] = _is_active;\\n\\n        emit GaugeStateChanged(_gauge_address, _is_middleman, _is_active);\\n    }\\n\\n    function setTimelock(address _new_timelock) external onlyByOwnGov {\\n        timelock_address = _new_timelock;\\n    }\\n\\n    function setCurator(address _new_curator_address) external onlyByOwnGov {\\n        curator_address = _new_curator_address;\\n    }\\n\\n    function setGaugeController(address _gauge_controller_address)\\n        external\\n        onlyByOwnGov\\n    {\\n        gauge_controller = IGaugeController(_gauge_controller_address);\\n    }\\n\\n    function setGlobalEmissionRate(uint256 _global_emission_rate)\\n        external\\n        onlyByOwnGov\\n    {\\n        global_emission_rate = _global_emission_rate;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardDistributed(\\n        address indexed gauge_address,\\n        uint256 reward_amount\\n    );\\n    event RecoveredERC20(address token, uint256 amount);\\n    event GaugeStateChanged(\\n        address gauge_address,\\n        bool is_middleman,\\n        bool is_active\\n    );\\n    event DistributionsToggled(bool distibutions_state);\\n}\\n\",\"keccak256\":\"0x01e78285ce452608f3e2c4b26825b8c5eb77b5d4063f5475ad806c6ccbd82c80\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Gauge/IGaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.11;\\n\\n// https://github.com/swervefi/swerve/edit/master/packages/swerve-contracts/interfaces/IGaugeController.sol\\n\\ninterface IGaugeController {\\n    struct Point {\\n        uint256 bias;\\n        uint256 slope;\\n    }\\n\\n    struct VotedSlope {\\n        uint256 slope;\\n        uint256 power;\\n        uint256 end;\\n    }\\n\\n    // Public variables\\n    function admin() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function voting_escrow() external view returns (address);\\n\\n    function n_gauge_types() external view returns (int128);\\n\\n    function n_gauges() external view returns (int128);\\n\\n    function gauge_type_names(int128) external view returns (string memory);\\n\\n    function gauges(uint256) external view returns (address);\\n\\n    function vote_user_slopes(address, address)\\n        external\\n        view\\n        returns (VotedSlope memory);\\n\\n    function vote_user_power(address) external view returns (uint256);\\n\\n    function last_user_vote(address, address) external view returns (uint256);\\n\\n    function points_weight(address, uint256)\\n        external\\n        view\\n        returns (Point memory);\\n\\n    function time_weight(address) external view returns (uint256);\\n\\n    function points_sum(int128, uint256) external view returns (Point memory);\\n\\n    function time_sum(uint256) external view returns (uint256);\\n\\n    function points_total(uint256) external view returns (uint256);\\n\\n    function time_total() external view returns (uint256);\\n\\n    function points_type_weight(int128, uint256)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function time_type_weight(uint256) external view returns (uint256);\\n\\n    // Getter functions\\n    function gauge_types(address) external view returns (int128);\\n\\n    function gauge_relative_weight(address) external view returns (uint256);\\n\\n    function gauge_relative_weight(address, uint256)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_gauge_weight(address) external view returns (uint256);\\n\\n    function get_type_weight(int128) external view returns (uint256);\\n\\n    function get_total_weight() external view returns (uint256);\\n\\n    function get_weights_sum_per_type(int128) external view returns (uint256);\\n\\n    // External functions\\n    function add_gauge(\\n        address,\\n        int128,\\n        uint256\\n    ) external;\\n\\n    function checkpoint() external;\\n\\n    function checkpoint_gauge(address) external;\\n\\n    function gauge_relative_weight_write(address) external returns (uint256);\\n\\n    function gauge_relative_weight_write(address, uint256)\\n        external\\n        returns (uint256);\\n\\n    function add_type(string memory, uint256) external;\\n\\n    function change_type_weight(int128, uint256) external;\\n\\n    function change_gauge_weight(address, uint256) external;\\n\\n    function vote_for_gauge_weights(address, uint256) external;\\n}\\n\",\"keccak256\":\"0xb24755da5bd2a87dadf356bbdc289c37b1b2167e362e31da37133b4527aaaee8\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Gauge/IGaugeRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.11;\\n\\ninterface IGaugeRewardsDistributor {\\n    function acceptOwnership() external;\\n\\n    function curator_address() external view returns (address);\\n\\n    function currentReward(address gauge_address)\\n        external\\n        view\\n        returns (uint256 reward_amount);\\n\\n    function distributeReward(address gauge_address)\\n        external\\n        returns (uint256 weeks_elapsed, uint256 reward_tally);\\n\\n    function distributionsOn() external view returns (bool);\\n\\n    function gauge_whitelist(address) external view returns (bool);\\n\\n    function is_middleman(address) external view returns (bool);\\n\\n    function last_time_gauge_paid(address) external view returns (uint256);\\n\\n    function nominateNewOwner(address _owner) external;\\n\\n    function nominatedOwner() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\\n\\n    function setCurator(address _new_curator_address) external;\\n\\n    function setGaugeController(address _gauge_controller_address) external;\\n\\n    function setGaugeState(\\n        address _gauge_address,\\n        bool _is_middleman,\\n        bool _is_active\\n    ) external;\\n\\n    function setTimelock(address _new_timelock) external;\\n\\n    function timelock_address() external view returns (address);\\n\\n    function toggleDistributions() external;\\n}\\n\",\"keccak256\":\"0x0144f95a46d1c565b48513537aee20f75285a4c314a1a11bbb1b624cd1cde850\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Gauge/MiddlemanGauge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {ReentrancyGuard} from \\\"solmate/src/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./IGaugeRewardsDistributor.sol\\\";\\nimport \\\"../Misc_AMOs/harmony/IERC20EthManager.sol\\\";\\nimport \\\"../Misc_AMOs/polygon/IRootChainManager.sol\\\";\\nimport \\\"../Misc_AMOs/solana/IWormhole.sol\\\";\\nimport \\\"../Staking/Owned.sol\\\";\\n\\ncontract MiddlemanGauge is Owned, ReentrancyGuard {\\n    using SafeTransferLib for ERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    address public immutable reward_token_address;\\n\\n    // Instances and addresses\\n    address public rewards_distributor_address;\\n\\n    // Informational\\n    string public name;\\n\\n    // Admin addresses\\n    address public timelock_address;\\n\\n    // Tracking\\n    uint32 public fake_nonce;\\n\\n    // Gauge-related\\n    uint32 public bridge_type;\\n    address public bridge_address;\\n    address public destination_address_override;\\n    string public non_evm_destination_address;\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyByOwnGov() {\\n        require(\\n            msg.sender == owner || msg.sender == timelock_address,\\n            \\\"Not owner or timelock\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRewardsDistributor() {\\n        require(\\n            msg.sender == rewards_distributor_address,\\n            \\\"Not rewards distributor\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _owner,\\n        address _reward_token_address,\\n        address _timelock_address,\\n        address _rewards_distributor_address,\\n        address _bridge_address,\\n        uint32 _bridge_type,\\n        address _destination_address_override,\\n        string memory _non_evm_destination_address,\\n        string memory _name\\n    ) Owned(_owner) {\\n        reward_token_address = _reward_token_address;\\n        timelock_address = _timelock_address;\\n\\n        rewards_distributor_address = _rewards_distributor_address;\\n\\n        bridge_address = _bridge_address;\\n        bridge_type = _bridge_type;\\n        destination_address_override = _destination_address_override;\\n        non_evm_destination_address = _non_evm_destination_address;\\n\\n        name = _name;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    // Callable only by the rewards distributor\\n    function pullAndBridge(uint256 reward_amount)\\n        external\\n        onlyRewardsDistributor\\n        nonReentrant\\n    {\\n        require(bridge_address != address(0), \\\"Invalid bridge address\\\");\\n\\n        // Pull in the rewards from the rewards distributor\\n        ERC20(reward_token_address).safeTransferFrom(\\n            rewards_distributor_address,\\n            address(this),\\n            reward_amount\\n        );\\n\\n        address address_to_send_to = address(this);\\n        if (destination_address_override != address(0))\\n            address_to_send_to = destination_address_override;\\n\\n        if (bridge_type == 0) {\\n            // Avalanche [Anyswap]\\n            ERC20(reward_token_address).safeTransfer(\\n                bridge_address,\\n                reward_amount\\n            );\\n        } else if (bridge_type == 1) {\\n            // BSC\\n            ERC20(reward_token_address).safeTransfer(\\n                bridge_address,\\n                reward_amount\\n            );\\n        } else if (bridge_type == 2) {\\n            // Fantom [Multichain / Anyswap]\\n            // Bridge is 0xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE\\n            ERC20(reward_token_address).safeTransfer(\\n                bridge_address,\\n                reward_amount\\n            );\\n        } else if (bridge_type == 3) {\\n            // Polygon\\n            // Bridge is 0xA0c68C638235ee32657e8f720a23ceC1bFc77C77\\n            // Interesting info https://blog.cryption.network/cryption-network-launches-cross-chain-staking-6cf000c25477\\n\\n            // Approve\\n            IRootChainManager rootChainMgr = IRootChainManager(bridge_address);\\n            bytes32 tokenType = rootChainMgr.tokenToType(reward_token_address);\\n            address predicate = rootChainMgr.typeToPredicate(tokenType);\\n            ERC20(reward_token_address).approve(predicate, reward_amount);\\n\\n            // DepositFor\\n            bytes memory depositData = abi.encode(reward_amount);\\n            rootChainMgr.depositFor(\\n                address_to_send_to,\\n                reward_token_address,\\n                depositData\\n            );\\n        } else if (bridge_type == 4) {\\n            // Solana\\n            // Wormhole Bridge is 0xf92cD566Ea4864356C5491c177A430C222d7e678\\n\\n            revert(\\\"Not supported yet\\\");\\n\\n            // // Approve\\n            // ERC20(reward_token_address).approve(bridge_address, reward_amount);\\n\\n            // // lockAssets\\n            // require(non_evm_destination_address != 0, \\\"Invalid destination\\\");\\n            // // non_evm_destination_address = base58 -> hex\\n            // // https://www.appdevtools.com/base58-encoder-decoder\\n            // IWormhole(bridge_address).lockAssets(\\n            //     reward_token_address,\\n            //     reward_amount,\\n            //     non_evm_destination_address,\\n            //     1,\\n            //     fake_nonce,\\n            //     false\\n            // );\\n        } else if (bridge_type == 5) {\\n            // Harmony\\n            // Bridge is at 0x2dccdb493827e15a5dc8f8b72147e6c4a5620857\\n\\n            // Approve\\n            ERC20(reward_token_address).approve(bridge_address, reward_amount);\\n\\n            // lockToken\\n            IERC20EthManager(bridge_address).lockToken(\\n                reward_token_address,\\n                reward_amount,\\n                address_to_send_to\\n            );\\n        }\\n\\n        // fake_nonce += 1;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS - Owner or timelock only ========== */\\n\\n    // Added to support recovering LP Rewards and other mistaken tokens from other systems to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n        external\\n        onlyByOwnGov\\n    {\\n        // Only the owner address can ever receive the recovery withdrawal\\n        ERC20(tokenAddress).safeTransfer(owner, tokenAmount);\\n        emit RecoveredERC20(tokenAddress, tokenAmount);\\n    }\\n\\n    // Generic proxy\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external onlyByOwnGov returns (bool, bytes memory) {\\n        (bool success, bytes memory result) = _to.call{value: _value}(_data);\\n        return (success, result);\\n    }\\n\\n    function setTimelock(address _new_timelock) external onlyByOwnGov {\\n        timelock_address = _new_timelock;\\n    }\\n\\n    function setBridgeInfo(\\n        address _bridge_address,\\n        uint32 _bridge_type,\\n        address _destination_address_override,\\n        string memory _non_evm_destination_address\\n    ) external onlyByOwnGov {\\n        bridge_address = _bridge_address;\\n\\n        // 0: Avalanche\\n        // 1: BSC\\n        // 2: Fantom\\n        // 3: Polygon\\n        // 4: Solana\\n        // 5: Harmony\\n        bridge_type = _bridge_type;\\n\\n        // Overridden cross-chain destination address\\n        destination_address_override = _destination_address_override;\\n\\n        // Set bytes32 / non-EVM address on the other chain, if applicable\\n        non_evm_destination_address = _non_evm_destination_address;\\n\\n        emit BridgeInfoChanged(\\n            _bridge_address,\\n            _bridge_type,\\n            _destination_address_override,\\n            _non_evm_destination_address\\n        );\\n    }\\n\\n    function setRewardsDistributor(address _rewards_distributor_address)\\n        external\\n        onlyByOwnGov\\n    {\\n        rewards_distributor_address = _rewards_distributor_address;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RecoveredERC20(address token, uint256 amount);\\n    event BridgeInfoChanged(\\n        address bridge_address,\\n        uint256 bridge_type,\\n        address destination_address_override,\\n        string non_evm_destination_address\\n    );\\n}\\n\",\"keccak256\":\"0xdf65171cebe921467dcbcbf4d4389e8dae962841969eec7cbfd7156b2d2b76be\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Misc_AMOs/harmony/IERC20EthManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC20EthManager {\\n    function lockToken(\\n        address ethTokenAddr,\\n        uint256 amount,\\n        address recipient\\n    ) external;\\n\\n    function lockTokenFor(\\n        address ethTokenAddr,\\n        address userAddr,\\n        uint256 amount,\\n        address recipient\\n    ) external;\\n\\n    function unlockToken(\\n        address ethTokenAddr,\\n        uint256 amount,\\n        address recipient,\\n        bytes32 receiptId\\n    ) external;\\n\\n    function usedEvents_(bytes32) external view returns (bool);\\n\\n    function wallet() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa47daa949854326a41874a7bbe8114ffab6fe86936063f5727f5f7d8a912767c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Misc_AMOs/polygon/IRootChainManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRootChainManager {\\n    function depositFor(\\n        address user,\\n        address rootToken,\\n        bytes memory depositData\\n    ) external;\\n\\n    function tokenToType(address) external view returns (bytes32);\\n\\n    function typeToPredicate(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x8c2ed723c5ac1d3a49602290e92b33d1e7f53b98ea9efa1ccece6b54ea05d812\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Misc_AMOs/solana/IWormhole.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IWormhole {\\n    function guardian_set_expirity() external view returns (uint32);\\n\\n    function guardian_set_index() external view returns (uint32);\\n\\n    function guardian_sets(uint32)\\n        external\\n        view\\n        returns (uint32 expiration_time);\\n\\n    function isWrappedAsset(address) external view returns (bool);\\n\\n    function lockAssets(\\n        address asset,\\n        uint256 amount,\\n        bytes32 recipient,\\n        uint8 target_chain,\\n        uint32 nonce,\\n        bool refund_dust\\n    ) external;\\n\\n    function lockETH(\\n        bytes32 recipient,\\n        uint8 target_chain,\\n        uint32 nonce\\n    ) external;\\n\\n    function wrappedAssetMaster() external view returns (address);\\n\\n    function wrappedAssets(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x8f29c0546890afdb1e2ecc980f0aada5330a7acc44d612d8ae76ec73eff02023\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Staking/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.11;\\n\\n// https://docs.synthetix.io/contracts/Owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(\\n            msg.sender == nominatedOwner,\\n            \\\"You must be nominated before you can accept ownership\\\"\\n        );\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == owner,\\n            \\\"Only the contract owner may perform this action\\\"\\n        );\\n        _;\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\",\"keccak256\":\"0xc096445e1df2035f11a9a26d158872cad64d270f829a7a3c548b42ce25d7697f\",\"license\":\"GPL-2.0-or-later\"},\"solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0xb282dd78aa7375d6b200b9a5d8dd214b2e5df1004f8217a4b4c2b07f0c5bfd01\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x333b56bef66ff71e3838910781df214acbeb6c2d6ace27a04ebb510f0e669300\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a060405260016002553480156200001657600080fd5b506040516200194c3803806200194c833981016040819052620000399162000166565b856001600160a01b038116620000955760405162461bcd60e51b815260206004820152601960248201527f4f776e657220616464726573732063616e6e6f74206265203000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03831690811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a150600580546001600160a01b03199081166001600160a01b039687161790915560048054821696861696909617909555918316608052600380549094169216919091179091556009805460ff19166001179055600a5550620001de565b80516001600160a01b03811681146200016157600080fd5b919050565b60008060008060008060c087890312156200018057600080fd5b6200018b8762000149565b95506200019b6020880162000149565b9450620001ab6040880162000149565b9350620001bb6060880162000149565b9250620001cb6080880162000149565b915060a087015190509295509295509295565b6080516117446200020860003960008181610297015281816109360152610a4301526117446000f3fe608060405234801561001057600080fd5b50600436106101815760003560e01c806379ba5097116100d8578063c1d56c741161008c578063dc6663c711610066578063dc6663c714610390578063e81e17c6146103b0578063e90956cf146103d057600080fd5b8063c1d56c741461033d578063c92073c114610350578063d8b9a0181461037057600080fd5b80638da5cb5b116100bd5780638da5cb5b146102f75780639d18e4b014610317578063bdacb3031461032a57600080fd5b806379ba5097146102dc5780638980f11f146102e457600080fd5b80632fd37b081161013a578063570b1e9911610114578063570b1e991461027f578063678a2226146102925780636ca81c1c146102b957600080fd5b80632fd37b081461020f578063305d6d5f1461023257806353a47bb71461023a57600080fd5b80630a3be7571161016b5780630a3be757146101c85780631627540c146101df5780631f8a7edf146101f257600080fd5b806291d2b814610186578063092193ab1461019b575b600080fd5b61019961019436600461150b565b6103e3565b005b6101ae6101a936600461150b565b6104d2565b604080519283526020830191909152015b60405180910390f35b6101d1600a5481565b6040519081526020016101bf565b6101996101ed36600461150b565b610ac8565b6009546101ff9060ff1681565b60405190151581526020016101bf565b6101ff61021d36600461150b565b60066020526000908152604090205460ff1681565b610199610be8565b60015461025a9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bf565b61019961028d36600461153e565b610d18565b61025a7f000000000000000000000000000000000000000000000000000000000000000081565b6101ff6102c736600461150b565b60076020526000908152604090205460ff1681565b610199610e65565b6101996102f2366004611587565b610fb0565b60005461025a9073ffffffffffffffffffffffffffffffffffffffff1681565b6101d161032536600461150b565b6110cd565b61019961033836600461150b565b6111a7565b61019961034b3660046115b1565b611291565b60055461025a9073ffffffffffffffffffffffffffffffffffffffff1681565b60035461025a9073ffffffffffffffffffffffffffffffffffffffff1681565b60045461025a9073ffffffffffffffffffffffffffffffffffffffff1681565b6101d16103be36600461150b565b60086020526000908152604090205481565b6101996103de36600461150b565b611339565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610420575060045473ffffffffffffffffffffffffffffffffffffffff1633145b61048b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064015b60405180910390fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600954600090819060ff161515600114610548576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f446973747269627574696f6e7320617265206f666600000000000000000000006044820152606401610482565b6002546001146105b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245454e5452414e4359000000000000000000000000000000000000000000006044820152606401610482565b6002805573ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604090205460ff16610647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4761756765206e6f742077686974656c697374656400000000000000000000006044820152606401610482565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600860205260408120549081900361067e57600192506106d4565b73ffffffffffffffffffffffffffffffffffffffff841660009081526008602052604090205462093a80906106b390426115f9565b6106bd9190611610565b9250826000036106d4576000809250925050610abc565b6000915060005b838110156108ae57600081600003610790576003546040517f6472eee100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015242602483015290911690636472eee1906044016020604051808303816000875af1158015610765573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610789919061164b565b905061085b565b60035473ffffffffffffffffffffffffffffffffffffffff1663d3078c94876107bc8562093a80611664565b6107c690426115f9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381865afa158015610834573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610858919061164b565b90505b6000670de0b6b3a764000082600a546108749190611664565b61087e9190611610565b905061088d62093a8082611664565b61089790866116a1565b9450505080806108a6906116b9565b9150506106db565b5073ffffffffffffffffffffffffffffffffffffffff84166000908152600860209081526040808320429055600790915290205460ff1615610a29576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af115801561097f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a391906116f1565b506040517f4ae3decf0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff851690634ae3decf90602401600060405180830381600087803b158015610a0c57600080fd5b505af1158015610a20573d6000803e3d6000fd5b50505050610a6a565b610a6a73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168584611423565b8373ffffffffffffffffffffffffffffffffffffffff167fe34918ff1c7084970068b53fd71ad6d8b04e9f15d3886cbf006443e6cdc52ea683604051610ab291815260200190565b60405180910390a2505b60016002559092909150565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201527f6f726d207468697320616374696f6e00000000000000000000000000000000006064820152608401610482565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229060200160405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610c25575060055473ffffffffffffffffffffffffffffffffffffffff1633145b80610c47575060045473ffffffffffffffffffffffffffffffffffffffff1633145b610cad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4e6f74206f776e65722c2063757261746f722c206f722074696d656c6f636b006044820152606401610482565b6009805460ff808216157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090921682179092556040519116151581527fa47e236370e478b9d163098c7c1f4f67b6efbb6683eeb0a669f04f302653779d9060200160405180910390a1565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610d55575060045473ffffffffffffffffffffffffffffffffffffffff1633145b610dbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b00000000000000000000006044820152606401610482565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260076020908152604080832080548715157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009182168117909255600684529382902080548715159516851790558151948552918401919091528201527f404f22d93b56a7e73713d7bbe543b016084d4d75b4d9177e8b8ab251f6e877d09060600160405180910390a1505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610f0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527f2063616e20616363657074206f776e65727368697000000000000000000000006064820152608401610482565b6000546001546040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff841617909155169055565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610fed575060045473ffffffffffffffffffffffffffffffffffffffff1633145b611053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b00000000000000000000006044820152606401610482565b60005461107a9073ffffffffffffffffffffffffffffffffffffffff848116911683611423565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f55350610fe57096d8c0ffa30beede987326bccfcb0b4415804164d0dd50ce8b1910160405180910390a15050565b6003546040517fd3078c9400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152426024830152600092839291169063d3078c9490604401602060405180830381865afa158015611147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116b919061164b565b90506000670de0b6b3a764000082600a546111869190611664565b6111909190611610565b905061119f62093a8082611664565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314806111e4575060045473ffffffffffffffffffffffffffffffffffffffff1633145b61124a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b00000000000000000000006044820152606401610482565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314806112ce575060045473ffffffffffffffffffffffffffffffffffffffff1633145b611334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b00000000000000000000006044820152606401610482565b600a55565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611376575060045473ffffffffffffffffffffffffffffffffffffffff1633145b6113dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b00000000000000000000006044820152606401610482565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006040517fa9059cbb000000000000000000000000000000000000000000000000000000008152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806114dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610482565b50505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461150657600080fd5b919050565b60006020828403121561151d57600080fd5b611526826114e2565b9392505050565b801515811461153b57600080fd5b50565b60008060006060848603121561155357600080fd5b61155c846114e2565b9250602084013561156c8161152d565b9150604084013561157c8161152d565b809150509250925092565b6000806040838503121561159a57600080fd5b6115a3836114e2565b946020939093013593505050565b6000602082840312156115c357600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561160b5761160b6115ca565b500390565b600082611646577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561165d57600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561169c5761169c6115ca565b500290565b600082198211156116b4576116b46115ca565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116ea576116ea6115ca565b5060010190565b60006020828403121561170357600080fd5b81516115268161152d56fea2646970667358221220036a74b10d6271247c13d6e557d6e5034f22725b0e2f4e10ffd66ea6db85373464736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101815760003560e01c806379ba5097116100d8578063c1d56c741161008c578063dc6663c711610066578063dc6663c714610390578063e81e17c6146103b0578063e90956cf146103d057600080fd5b8063c1d56c741461033d578063c92073c114610350578063d8b9a0181461037057600080fd5b80638da5cb5b116100bd5780638da5cb5b146102f75780639d18e4b014610317578063bdacb3031461032a57600080fd5b806379ba5097146102dc5780638980f11f146102e457600080fd5b80632fd37b081161013a578063570b1e9911610114578063570b1e991461027f578063678a2226146102925780636ca81c1c146102b957600080fd5b80632fd37b081461020f578063305d6d5f1461023257806353a47bb71461023a57600080fd5b80630a3be7571161016b5780630a3be757146101c85780631627540c146101df5780631f8a7edf146101f257600080fd5b806291d2b814610186578063092193ab1461019b575b600080fd5b61019961019436600461150b565b6103e3565b005b6101ae6101a936600461150b565b6104d2565b604080519283526020830191909152015b60405180910390f35b6101d1600a5481565b6040519081526020016101bf565b6101996101ed36600461150b565b610ac8565b6009546101ff9060ff1681565b60405190151581526020016101bf565b6101ff61021d36600461150b565b60066020526000908152604090205460ff1681565b610199610be8565b60015461025a9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bf565b61019961028d36600461153e565b610d18565b61025a7f000000000000000000000000000000000000000000000000000000000000000081565b6101ff6102c736600461150b565b60076020526000908152604090205460ff1681565b610199610e65565b6101996102f2366004611587565b610fb0565b60005461025a9073ffffffffffffffffffffffffffffffffffffffff1681565b6101d161032536600461150b565b6110cd565b61019961033836600461150b565b6111a7565b61019961034b3660046115b1565b611291565b60055461025a9073ffffffffffffffffffffffffffffffffffffffff1681565b60035461025a9073ffffffffffffffffffffffffffffffffffffffff1681565b60045461025a9073ffffffffffffffffffffffffffffffffffffffff1681565b6101d16103be36600461150b565b60086020526000908152604090205481565b6101996103de36600461150b565b611339565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610420575060045473ffffffffffffffffffffffffffffffffffffffff1633145b61048b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064015b60405180910390fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600954600090819060ff161515600114610548576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f446973747269627574696f6e7320617265206f666600000000000000000000006044820152606401610482565b6002546001146105b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245454e5452414e4359000000000000000000000000000000000000000000006044820152606401610482565b6002805573ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604090205460ff16610647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4761756765206e6f742077686974656c697374656400000000000000000000006044820152606401610482565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600860205260408120549081900361067e57600192506106d4565b73ffffffffffffffffffffffffffffffffffffffff841660009081526008602052604090205462093a80906106b390426115f9565b6106bd9190611610565b9250826000036106d4576000809250925050610abc565b6000915060005b838110156108ae57600081600003610790576003546040517f6472eee100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015242602483015290911690636472eee1906044016020604051808303816000875af1158015610765573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610789919061164b565b905061085b565b60035473ffffffffffffffffffffffffffffffffffffffff1663d3078c94876107bc8562093a80611664565b6107c690426115f9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381865afa158015610834573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610858919061164b565b90505b6000670de0b6b3a764000082600a546108749190611664565b61087e9190611610565b905061088d62093a8082611664565b61089790866116a1565b9450505080806108a6906116b9565b9150506106db565b5073ffffffffffffffffffffffffffffffffffffffff84166000908152600860209081526040808320429055600790915290205460ff1615610a29576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af115801561097f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a391906116f1565b506040517f4ae3decf0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff851690634ae3decf90602401600060405180830381600087803b158015610a0c57600080fd5b505af1158015610a20573d6000803e3d6000fd5b50505050610a6a565b610a6a73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168584611423565b8373ffffffffffffffffffffffffffffffffffffffff167fe34918ff1c7084970068b53fd71ad6d8b04e9f15d3886cbf006443e6cdc52ea683604051610ab291815260200190565b60405180910390a2505b60016002559092909150565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201527f6f726d207468697320616374696f6e00000000000000000000000000000000006064820152608401610482565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229060200160405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610c25575060055473ffffffffffffffffffffffffffffffffffffffff1633145b80610c47575060045473ffffffffffffffffffffffffffffffffffffffff1633145b610cad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4e6f74206f776e65722c2063757261746f722c206f722074696d656c6f636b006044820152606401610482565b6009805460ff808216157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090921682179092556040519116151581527fa47e236370e478b9d163098c7c1f4f67b6efbb6683eeb0a669f04f302653779d9060200160405180910390a1565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610d55575060045473ffffffffffffffffffffffffffffffffffffffff1633145b610dbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b00000000000000000000006044820152606401610482565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260076020908152604080832080548715157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009182168117909255600684529382902080548715159516851790558151948552918401919091528201527f404f22d93b56a7e73713d7bbe543b016084d4d75b4d9177e8b8ab251f6e877d09060600160405180910390a1505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610f0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527f2063616e20616363657074206f776e65727368697000000000000000000000006064820152608401610482565b6000546001546040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff841617909155169055565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610fed575060045473ffffffffffffffffffffffffffffffffffffffff1633145b611053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b00000000000000000000006044820152606401610482565b60005461107a9073ffffffffffffffffffffffffffffffffffffffff848116911683611423565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f55350610fe57096d8c0ffa30beede987326bccfcb0b4415804164d0dd50ce8b1910160405180910390a15050565b6003546040517fd3078c9400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152426024830152600092839291169063d3078c9490604401602060405180830381865afa158015611147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116b919061164b565b90506000670de0b6b3a764000082600a546111869190611664565b6111909190611610565b905061119f62093a8082611664565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314806111e4575060045473ffffffffffffffffffffffffffffffffffffffff1633145b61124a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b00000000000000000000006044820152606401610482565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314806112ce575060045473ffffffffffffffffffffffffffffffffffffffff1633145b611334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b00000000000000000000006044820152606401610482565b600a55565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611376575060045473ffffffffffffffffffffffffffffffffffffffff1633145b6113dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b00000000000000000000006044820152606401610482565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006040517fa9059cbb000000000000000000000000000000000000000000000000000000008152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806114dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610482565b50505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461150657600080fd5b919050565b60006020828403121561151d57600080fd5b611526826114e2565b9392505050565b801515811461153b57600080fd5b50565b60008060006060848603121561155357600080fd5b61155c846114e2565b9250602084013561156c8161152d565b9150604084013561157c8161152d565b809150509250925092565b6000806040838503121561159a57600080fd5b6115a3836114e2565b946020939093013593505050565b6000602082840312156115c357600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561160b5761160b6115ca565b500390565b600082611646577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561165d57600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561169c5761169c6115ca565b500290565b600082198211156116b4576116b46115ca565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116ea576116ea6115ca565b5060010190565b60006020828403121561170357600080fd5b81516115268161152d56fea2646970667358221220036a74b10d6271247c13d6e557d6e5034f22725b0e2f4e10ffd66ea6db85373464736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1679,
        "contract": "contracts/Gauge/GaugeRewardsDistributor.sol:GaugeRewardsDistributor",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1681,
        "contract": "contracts/Gauge/GaugeRewardsDistributor.sol:GaugeRewardsDistributor",
        "label": "nominatedOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2170,
        "contract": "contracts/Gauge/GaugeRewardsDistributor.sol:GaugeRewardsDistributor",
        "label": "locked",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 291,
        "contract": "contracts/Gauge/GaugeRewardsDistributor.sol:GaugeRewardsDistributor",
        "label": "gauge_controller",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IGaugeController)1004"
      },
      {
        "astId": 293,
        "contract": "contracts/Gauge/GaugeRewardsDistributor.sol:GaugeRewardsDistributor",
        "label": "timelock_address",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 295,
        "contract": "contracts/Gauge/GaugeRewardsDistributor.sol:GaugeRewardsDistributor",
        "label": "curator_address",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 305,
        "contract": "contracts/Gauge/GaugeRewardsDistributor.sol:GaugeRewardsDistributor",
        "label": "gauge_whitelist",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 309,
        "contract": "contracts/Gauge/GaugeRewardsDistributor.sol:GaugeRewardsDistributor",
        "label": "is_middleman",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 313,
        "contract": "contracts/Gauge/GaugeRewardsDistributor.sol:GaugeRewardsDistributor",
        "label": "last_time_gauge_paid",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 315,
        "contract": "contracts/Gauge/GaugeRewardsDistributor.sol:GaugeRewardsDistributor",
        "label": "distributionsOn",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 317,
        "contract": "contracts/Gauge/GaugeRewardsDistributor.sol:GaugeRewardsDistributor",
        "label": "global_emission_rate",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IGaugeController)1004": {
        "encoding": "inplace",
        "label": "contract IGaugeController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}