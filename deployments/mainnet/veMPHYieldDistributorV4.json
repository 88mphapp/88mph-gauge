{
  "address": "0x2470c7b811f43bAAE862FC9de0BfC5B6284eA57F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_emittedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veMPH_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DefaultInitialization",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token_address",
          "type": "address"
        }
      ],
      "name": "OldYieldCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerNominated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoveredERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yieldRate",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token_address",
          "type": "address"
        }
      ],
      "name": "YieldCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "YieldDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yieldRate",
          "type": "uint256"
        }
      ],
      "name": "YieldPeriodRenewed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_addr",
          "type": "address"
        }
      ],
      "name": "checkpointOtherUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "eligibleCurrentVeMPH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eligible_vemph_bal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stored_ending_timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emittedToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emitted_token_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fractionParticipating",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yield0",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYieldForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "greylist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "greylistAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeYieldApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "nominateNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nominatedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reward_notifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_yieldCollectionPaused",
          "type": "bool"
        }
      ],
      "name": "setPauses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_new_timelock",
          "type": "address"
        }
      ],
      "name": "setTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_yieldDuration",
          "type": "uint256"
        }
      ],
      "name": "setYieldDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_new_rate0",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sync_too",
          "type": "bool"
        }
      ],
      "name": "setYieldRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelock_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "notifier_addr",
          "type": "address"
        }
      ],
      "name": "toggleRewardNotifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVeMPHParticipating",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVeMPHSupplyStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userIsInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userVeMPHCheckpointed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userVeMPHEndpointCheckpointed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userYieldPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldCollectionPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldPerVeMPH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldPerVeMPHStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "yields",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ad93c71191d3ff69f107ca3abebec7c38c1456996cb5a0661f6ad3cc9aa10cc",
  "receipt": {
    "to": null,
    "from": "0x000000004b60a12164e6942dCd3e007F079b725B",
    "contractAddress": "0x2470c7b811f43bAAE862FC9de0BfC5B6284eA57F",
    "transactionIndex": 237,
    "gasUsed": "2302843",
    "logsBloom": "0x
    "blockHash": "0x4d9fd365dc4548a8b6203d781223710deb440a428184c2bbd2f902225cf70c43",
    "transactionHash": "0x9ad93c71191d3ff69f107ca3abebec7c38c1456996cb5a0661f6ad3cc9aa10cc",
    "logs": [
      {
        "transactionIndex": 237,
        "blockNumber": 15188190,
        "transactionHash": "0x9ad93c71191d3ff69f107ca3abebec7c38c1456996cb5a0661f6ad3cc9aa10cc",
        "address": "0x2470c7b811f43bAAE862FC9de0BfC5B6284eA57F",
        "topics": [
          "0xb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056f34826cc63151f74fa8f701e4f73c5eaae52ad",
        "logIndex": 410,
        "blockHash": "0x4d9fd365dc4548a8b6203d781223710deb440a428184c2bbd2f902225cf70c43"
      }
    ],
    "blockNumber": 15188190,
    "cumulativeGasUsed": "22736365",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x56f34826Cc63151f74FA8f701E4f73C5EAae52AD",
    "0x8888801aF4d980682e47f1A9036e589479e835C5",
    "0x90523c113517A59f6BEBC123b75612Aea9FD3140",
    "0x0f17c89Ae8eDF5F8AD78D4af5518DC238bb62624"
  ],
  "numDeployments": 1,
  "solcInputHash": "4965f8c9a7bf13ed501782ae1bb4db5e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_emittedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veMPH_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DefaultInitialization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"OldYieldCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldRate\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"YieldCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"YieldDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldRate\",\"type\":\"uint256\"}],\"name\":\"YieldPeriodRenewed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_addr\",\"type\":\"address\"}],\"name\":\"checkpointOtherUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"eligibleCurrentVeMPH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eligible_vemph_bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stored_ending_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emittedToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitted_token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fractionParticipating\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yield0\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYieldForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"greylist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"greylistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeYieldApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward_notifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_yieldCollectionPaused\",\"type\":\"bool\"}],\"name\":\"setPauses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yieldDuration\",\"type\":\"uint256\"}],\"name\":\"setYieldDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_rate0\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sync_too\",\"type\":\"bool\"}],\"name\":\"setYieldRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notifier_addr\",\"type\":\"address\"}],\"name\":\"toggleRewardNotifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVeMPHParticipating\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVeMPHSupplyStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIsInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userVeMPHCheckpointed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userVeMPHEndpointCheckpointed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userYieldPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldCollectionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldPerVeMPH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldPerVeMPHStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yields\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/veMPHYieldDistributorV4.sol\":\"veMPHYieldDistributorV4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Common/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.11;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x60d51a32063a4975dbf9433d38f5849173527da72f007c38053274e06698cb54\",\"license\":\"MIT\"},\"contracts/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.11;\\n\\nimport \\\"../Common/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../Math/SafeMath.sol\\\";\\nimport \\\"../Utils/Address.sol\\\";\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\n \\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    \\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory __name, string memory __symbol) public {\\n        _name = __name;\\n        _symbol = __symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.approve(address spender, uint256 amount)\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for `accounts`'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal virtual {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x433b9ee195d0bd257219bc337ff8aac624282a826726b18fdb299de0e3d4149e\",\"license\":\"MIT\"},\"contracts/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.11;\\n\\nimport \\\"../Common/Context.sol\\\";\\nimport \\\"../Math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\",\"keccak256\":\"0x057bec1fafd7ca222117f41fcfb9c8dc1f61aa30e5a0222c981196e9113de7e6\",\"license\":\"MIT\"},\"contracts/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.11;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../Math/SafeMath.sol\\\";\\nimport \\\"../Utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xe8c2c7e61079bea734091954fd1f6077e566d1b15f004b9aa103fc453f4ca2b7\",\"license\":\"MIT\"},\"contracts/Gauge/IveMPH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.11;\\npragma abicoder v2;\\n\\ninterface IveMPH {\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n    }\\n\\n    function commit_transfer_ownership(address addr) external;\\n    function apply_transfer_ownership() external;\\n    function commit_smart_wallet_checker(address addr) external;\\n    function apply_smart_wallet_checker() external;\\n    function toggleEmergencyUnlock() external;\\n    function recoverERC20(address token_addr, uint256 amount) external;\\n    function get_last_user_slope(address addr) external view returns (int128);\\n    function user_point_history__ts(address _addr, uint256 _idx) external view returns (uint256);\\n    function locked__end(address _addr) external view returns (uint256);\\n    function checkpoint() external;\\n    function deposit_for(address _addr, uint256 _value) external;\\n    function create_lock(uint256 _value, uint256 _unlock_time) external;\\n    function increase_amount(uint256 _value) external;\\n    function increase_unlock_time(uint256 _unlock_time) external;\\n    function withdraw() external;\\n    function balanceOf(address addr) external view returns (uint256);\\n    function balanceOf(address addr, uint256 _t) external view returns (uint256);\\n    function balanceOfAt(address addr, uint256 _block) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function totalSupply(uint256 t) external view returns (uint256);\\n    function totalSupplyAt(uint256 _block) external view returns (uint256);\\n    function totalFXSSupply() external view returns (uint256);\\n    function totalFXSSupplyAt(uint256 _block) external view returns (uint256);\\n    function changeController(address _newController) external;\\n    function token() external view returns (address);\\n    function supply() external view returns (uint256);\\n    function locked(address addr) external view returns (LockedBalance memory);\\n    function epoch() external view returns (uint256);\\n    function point_history(uint256 arg0) external view returns (int128 bias, int128 slope, uint256 ts, uint256 blk, uint256 fxs_amt);\\n    function user_point_history(address arg0, uint256 arg1) external view returns (int128 bias, int128 slope, uint256 ts, uint256 blk, uint256 fxs_amt);\\n    function user_point_epoch(address arg0) external view returns (uint256);\\n    function slope_changes(uint256 arg0) external view returns (int128);\\n    function controller() external view returns (address);\\n    function transfersEnabled() external view returns (bool);\\n    function emergencyUnlockActive() external view returns (bool);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function version() external view returns (string memory);\\n    function decimals() external view returns (uint256);\\n    function future_smart_wallet_checker() external view returns (address);\\n    function smart_wallet_checker() external view returns (address);\\n    function admin() external view returns (address);\\n    function future_admin() external view returns (address);\\n}\",\"keccak256\":\"0x1bad00a0588e99f331992e7b2a47b6e6ff28ba9ddc4c9c6c23ad86722adc8414\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.11;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0x62bc6e8ee2764351c70251d50f023f15a87b6e9e31fe64e344c33a2580982dda\",\"license\":\"MIT\"},\"contracts/Math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.11;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x43a20f7cf4c4319f81450d53779455e88a7ab80bdfc43925156ed4083b74a180\",\"license\":\"MIT\"},\"contracts/Staking/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.11;\\n\\n// https://docs.synthetix.io/contracts/Owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor (address _owner) public {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n        _;\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\",\"keccak256\":\"0x89e1dde7e13d0109febf812e7d97dda7f24feb7cfe90239c0f7585d1143407d1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Staking/veMPHYieldDistributorV4.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\n// ====================================================================\\n// |     ______                   _______                             |\\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\\\/ __ `/ __ \\\\/ ___/ _ \\\\  |\\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\\n// | /_/   /_/   \\\\__,_/_/|_|  /_/   /_/_/ /_/\\\\__,_/_/ /_/\\\\___/\\\\___/   |\\n// |                                                                  |\\n// ====================================================================\\n// ======================veMPHYieldDistributorV4=======================\\n// ====================================================================\\n// Distributes Frax protocol yield based on the claimer's veMPH balance\\n// V3: Yield will now not accrue for unlocked veMPH\\n\\n// Frax Finance: https://github.com/FraxFinance\\n\\n// Primary Author(s)\\n// Travis Moore: https://github.com/FortisFortuna\\n\\n// Reviewer(s) / Contributor(s)\\n// Jason Huan: https://github.com/jasonhuan\\n// Sam Kazemian: https://github.com/samkazemian\\n\\n// Originally inspired by Synthetix.io, but heavily modified by the Frax team (veMPH portion)\\n// https://github.com/Synthetixio/synthetix/blob/develop/contracts/StakingRewards.sol\\n\\nimport \\\"../Math/Math.sol\\\";\\nimport \\\"../Math/SafeMath.sol\\\";\\nimport \\\"../Gauge/IveMPH.sol\\\";\\nimport \\\"../Uniswap/TransferHelper.sol\\\";\\nimport \\\"../ERC20/ERC20.sol\\\";\\nimport \\\"../ERC20/SafeERC20.sol\\\";\\nimport \\\"../Utils/ReentrancyGuard.sol\\\";\\nimport \\\"./Owned.sol\\\";\\n\\ncontract veMPHYieldDistributorV4 is Owned, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // Instances\\n    IveMPH private veMPH;\\n    ERC20 public emittedToken;\\n\\n    // Addresses\\n    address public emitted_token_address;\\n\\n    // Admin addresses\\n    address public timelock_address;\\n\\n    // Constant for price precision\\n    uint256 private constant PRICE_PRECISION = 1e6;\\n\\n    // Yield and period related\\n    uint256 public periodFinish;\\n    uint256 public lastUpdateTime;\\n    uint256 public yieldRate;\\n    uint256 public yieldDuration = 604800; // 7 * 86400  (7 days)\\n    mapping(address => bool) public reward_notifiers;\\n\\n    // Yield tracking\\n    uint256 public yieldPerVeMPHStored = 0;\\n    mapping(address => uint256) public userYieldPerTokenPaid;\\n    mapping(address => uint256) public yields;\\n\\n    // veMPH tracking\\n    uint256 public totalVeMPHParticipating = 0;\\n    uint256 public totalVeMPHSupplyStored = 0;\\n    mapping(address => bool) public userIsInitialized;\\n    mapping(address => uint256) public userVeMPHCheckpointed;\\n    mapping(address => uint256) public userVeMPHEndpointCheckpointed;\\n    mapping(address => uint256) private lastRewardClaimTime; // staker addr -> timestamp\\n\\n    // Greylists\\n    mapping(address => bool) public greylist;\\n\\n    // Admin booleans for emergencies\\n    bool public yieldCollectionPaused = false; // For emergencies\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyByOwnGov() {\\n        require(\\n            msg.sender == owner || msg.sender == timelock_address,\\n            \\\"Not owner or timelock\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notYieldCollectionPaused() {\\n        require(yieldCollectionPaused == false, \\\"Yield collection is paused\\\");\\n        _;\\n    }\\n\\n    modifier checkpointUser(address account) {\\n        _checkpointUser(account);\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _owner,\\n        address _emittedToken,\\n        address _timelock_address,\\n        address _veMPH_address\\n    ) Owned(_owner) {\\n        emitted_token_address = _emittedToken;\\n        emittedToken = ERC20(_emittedToken);\\n\\n        veMPH = IveMPH(_veMPH_address);\\n        lastUpdateTime = block.timestamp;\\n        timelock_address = _timelock_address;\\n\\n        reward_notifiers[_owner] = true;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function fractionParticipating() external view returns (uint256) {\\n        return\\n            totalVeMPHParticipating.mul(PRICE_PRECISION).div(\\n                totalVeMPHSupplyStored\\n            );\\n    }\\n\\n    // Only positions with locked veMPH can accrue yield. Otherwise, expired-locked veMPH\\n    // is de-facto rewards for MPH.\\n    function eligibleCurrentVeMPH(address account)\\n        public\\n        view\\n        returns (uint256 eligible_vemph_bal, uint256 stored_ending_timestamp)\\n    {\\n        uint256 curr_vemph_bal = veMPH.balanceOf(account);\\n\\n        // Stored is used to prevent abuse\\n        stored_ending_timestamp = userVeMPHEndpointCheckpointed[account];\\n\\n        // Only unexpired veMPH should be eligible\\n        if (\\n            stored_ending_timestamp != 0 &&\\n            (block.timestamp >= stored_ending_timestamp)\\n        ) {\\n            eligible_vemph_bal = 0;\\n        } else if (block.timestamp >= stored_ending_timestamp) {\\n            eligible_vemph_bal = 0;\\n        } else {\\n            eligible_vemph_bal = curr_vemph_bal;\\n        }\\n    }\\n\\n    function lastTimeYieldApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function yieldPerVeMPH() public view returns (uint256) {\\n        if (totalVeMPHSupplyStored == 0) {\\n            return yieldPerVeMPHStored;\\n        } else {\\n            return (\\n                yieldPerVeMPHStored.add(\\n                    lastTimeYieldApplicable()\\n                        .sub(lastUpdateTime)\\n                        .mul(yieldRate)\\n                        .mul(1e18)\\n                        .div(totalVeMPHSupplyStored)\\n                )\\n            );\\n        }\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        // Uninitialized users should not earn anything yet\\n        if (!userIsInitialized[account]) return 0;\\n\\n        // Get eligible veMPH balances\\n        (\\n            uint256 eligible_current_vemph,\\n            uint256 ending_timestamp\\n        ) = eligibleCurrentVeMPH(account);\\n\\n        // If your veMPH is unlocked\\n        uint256 eligible_time_fraction = PRICE_PRECISION;\\n        if (eligible_current_vemph == 0) {\\n            // And you already claimed after expiration\\n            if (lastRewardClaimTime[account] >= ending_timestamp) {\\n                // You get NOTHING. You LOSE. Good DAY ser!\\n                return 0;\\n            }\\n            // You haven't claimed yet\\n            else {\\n                uint256 eligible_time = (ending_timestamp).sub(\\n                    lastRewardClaimTime[account]\\n                );\\n                uint256 total_time = (block.timestamp).sub(\\n                    lastRewardClaimTime[account]\\n                );\\n                eligible_time_fraction = PRICE_PRECISION.mul(eligible_time).div(\\n                        total_time\\n                    );\\n            }\\n        }\\n\\n        // If the amount of veMPH increased, only pay off based on the old balance\\n        // Otherwise, take the midpoint\\n        uint256 vemph_balance_to_use;\\n        {\\n            uint256 old_vemph_balance = userVeMPHCheckpointed[account];\\n            if (eligible_current_vemph > old_vemph_balance) {\\n                vemph_balance_to_use = old_vemph_balance;\\n            } else {\\n                vemph_balance_to_use = (\\n                    (eligible_current_vemph).add(old_vemph_balance)\\n                ).div(2);\\n            }\\n        }\\n\\n        return (\\n            vemph_balance_to_use\\n                .mul(yieldPerVeMPH().sub(userYieldPerTokenPaid[account]))\\n                .mul(eligible_time_fraction)\\n                .div(1e18 * PRICE_PRECISION)\\n                .add(yields[account])\\n        );\\n    }\\n\\n    function getYieldForDuration() external view returns (uint256) {\\n        return (yieldRate.mul(yieldDuration));\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function _checkpointUser(address account) internal {\\n        // Need to retro-adjust some things if the period hasn't been renewed, then start a new one\\n        sync();\\n\\n        // Calculate the earnings first\\n        _syncEarned(account);\\n\\n        // Get the old and the new veMPH balances\\n        uint256 old_vemph_balance = userVeMPHCheckpointed[account];\\n        uint256 new_vemph_balance = veMPH.balanceOf(account);\\n\\n        // Update the user's stored veMPH balance\\n        userVeMPHCheckpointed[account] = new_vemph_balance;\\n\\n        // Update the user's stored ending timestamp\\n        IveMPH.LockedBalance memory curr_locked_bal_pack = veMPH.locked(\\n            account\\n        );\\n        userVeMPHEndpointCheckpointed[account] = curr_locked_bal_pack.end;\\n\\n        // Update the total amount participating\\n        if (new_vemph_balance >= old_vemph_balance) {\\n            uint256 weight_diff = new_vemph_balance.sub(old_vemph_balance);\\n            totalVeMPHParticipating = totalVeMPHParticipating.add(weight_diff);\\n        } else {\\n            uint256 weight_diff = old_vemph_balance.sub(new_vemph_balance);\\n            totalVeMPHParticipating = totalVeMPHParticipating.sub(weight_diff);\\n        }\\n\\n        // Mark the user as initialized\\n        if (!userIsInitialized[account]) {\\n            userIsInitialized[account] = true;\\n            lastRewardClaimTime[account] = block.timestamp;\\n        }\\n    }\\n\\n    function _syncEarned(address account) internal {\\n        if (account != address(0)) {\\n            uint256 earned0 = earned(account);\\n            yields[account] = earned0;\\n            userYieldPerTokenPaid[account] = yieldPerVeMPHStored;\\n        }\\n    }\\n\\n    // Anyone can checkpoint another user\\n    function checkpointOtherUser(address user_addr) external {\\n        _checkpointUser(user_addr);\\n    }\\n\\n    // Checkpoints the user\\n    function checkpoint() external {\\n        _checkpointUser(msg.sender);\\n    }\\n\\n    function getYield()\\n        external\\n        nonReentrant\\n        notYieldCollectionPaused\\n        checkpointUser(msg.sender)\\n        returns (uint256 yield0)\\n    {\\n        require(greylist[msg.sender] == false, \\\"Address has been greylisted\\\");\\n\\n        yield0 = yields[msg.sender];\\n        if (yield0 > 0) {\\n            yields[msg.sender] = 0;\\n            TransferHelper.safeTransfer(\\n                emitted_token_address,\\n                msg.sender,\\n                yield0\\n            );\\n            emit YieldCollected(msg.sender, yield0, emitted_token_address);\\n        }\\n\\n        lastRewardClaimTime[msg.sender] = block.timestamp;\\n    }\\n\\n    function sync() public {\\n        // Update the total veMPH supply\\n        yieldPerVeMPHStored = yieldPerVeMPH();\\n        totalVeMPHSupplyStored = veMPH.totalSupply();\\n        lastUpdateTime = lastTimeYieldApplicable();\\n    }\\n\\n    function notifyRewardAmount(uint256 amount) external {\\n        // Only whitelisted addresses can notify rewards\\n        require(reward_notifiers[msg.sender], \\\"Sender not whitelisted\\\");\\n\\n        // Handle the transfer of emission tokens via `transferFrom` to reduce the number\\n        // of transactions required and ensure correctness of the smission amount\\n        emittedToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Update some values beforehand\\n        sync();\\n\\n        // Update the new yieldRate\\n        if (block.timestamp >= periodFinish) {\\n            yieldRate = amount.div(yieldDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(yieldRate);\\n            yieldRate = amount.add(leftover).div(yieldDuration);\\n        }\\n\\n        // Update duration-related info\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(yieldDuration);\\n\\n        emit RewardAdded(amount, yieldRate);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    // Added to support recovering LP Yield and other mistaken tokens from other systems to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n        external\\n        onlyByOwnGov\\n    {\\n        // Only the owner address can ever receive the recovery withdrawal\\n        TransferHelper.safeTransfer(tokenAddress, owner, tokenAmount);\\n        emit RecoveredERC20(tokenAddress, tokenAmount);\\n    }\\n\\n    function setYieldDuration(uint256 _yieldDuration) external onlyByOwnGov {\\n        require(\\n            periodFinish == 0 || block.timestamp > periodFinish,\\n            \\\"Previous yield period must be complete before changing the duration for the new period\\\"\\n        );\\n        yieldDuration = _yieldDuration;\\n        emit YieldDurationUpdated(yieldDuration);\\n    }\\n\\n    function greylistAddress(address _address) external onlyByOwnGov {\\n        greylist[_address] = !(greylist[_address]);\\n    }\\n\\n    function toggleRewardNotifier(address notifier_addr) external onlyByOwnGov {\\n        reward_notifiers[notifier_addr] = !reward_notifiers[notifier_addr];\\n    }\\n\\n    function setPauses(bool _yieldCollectionPaused) external onlyByOwnGov {\\n        yieldCollectionPaused = _yieldCollectionPaused;\\n    }\\n\\n    function setYieldRate(uint256 _new_rate0, bool sync_too)\\n        external\\n        onlyByOwnGov\\n    {\\n        yieldRate = _new_rate0;\\n\\n        if (sync_too) {\\n            sync();\\n        }\\n    }\\n\\n    function setTimelock(address _new_timelock) external onlyByOwnGov {\\n        timelock_address = _new_timelock;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint256 reward, uint256 yieldRate);\\n    event OldYieldCollected(\\n        address indexed user,\\n        uint256 yield,\\n        address token_address\\n    );\\n    event YieldCollected(\\n        address indexed user,\\n        uint256 yield,\\n        address token_address\\n    );\\n    event YieldDurationUpdated(uint256 newDuration);\\n    event RecoveredERC20(address token, uint256 amount);\\n    event YieldPeriodRenewed(address token, uint256 yieldRate);\\n    event DefaultInitialization();\\n\\n    /* ========== A CHICKEN ========== */\\n    //\\n    //         ,~.\\n    //      ,-'__ `-,\\n    //     {,-'  `. }              ,')\\n    //    ,( a )   `-.__         ,',')~,\\n    //   <=.) (         `-.__,==' ' ' '}\\n    //     (   )                      /)\\n    //      `-'\\\\   ,                    )\\n    //          |  \\\\        `~.        /\\n    //          \\\\   `._        \\\\      /\\n    //           \\\\     `._____,'    ,'\\n    //            `-.             ,'\\n    //               `-._     _,-'\\n    //                   77jj'\\n    //                  //_||\\n    //               __//--'/`\\n    //             ,--'/`  '\\n    //\\n    // [hjw] https://textart.io/art/vw6Sa3iwqIRGkZsN1BC2vweF/chicken\\n}\\n\",\"keccak256\":\"0x67c6de5c008fcdd287943fc099ccdc5d7be84f80f5d915ed37af40f048aed976\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Uniswap/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.11;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0x2eb33792741584e83e0794a7493335b5dce9a9b675dda9e647ce29d88a40a196\",\"license\":\"MIT\"},\"contracts/Utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.11 <0.9.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xe392046e85c78eea7d4c1237af52a5fc06c097b7a480ea4f20159670b4a582a4\",\"license\":\"MIT\"},\"contracts/Utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.11;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0xd9ba5798bbb966d8334f8e17d30c4605d2e7ce27413b5fb260043abb7dc3a784\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405262093a80600a556000600c819055600f8190556010556016805460ff191690553480156200003157600080fd5b50604051620027053803806200270583398101604081905262000054916200019e565b836001600160a01b038116620000b05760405162461bcd60e51b815260206004820152601960248201527f4f776e657220616464726573732063616e6e6f74206265203000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03831690811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a15060016002819055600580546001600160a01b03199081166001600160a01b0396871690811790925560048054821690921790915560038054821693861693909317909255426008556006805490921692841692909217905591166000908152600b60205260409020805460ff19169091179055620001fb565b80516001600160a01b03811681146200019957600080fd5b919050565b60008060008060808587031215620001b557600080fd5b620001c08562000181565b9350620001d06020860162000181565b9250620001e06040860162000181565b9150620001f06060860162000181565b905092959194509250565b6124fa806200020b6000396000f3fe608060405234801561001057600080fd5b50600436106102c75760003560e01c80638da5cb5b1161017b578063c8f33c91116100d8578063ebe2b12b1161008c578063fc939bb111610071578063fc939bb11461060b578063ff7cc34a14610613578063fff6cae91461061c57600080fd5b8063ebe2b12b146105e2578063f8b67dc3146105eb57600080fd5b8063de02bab7116100bd578063de02bab714610599578063e172cf21146105b9578063e9218ff6146105c257600080fd5b8063c8f33c9114610570578063dc6663c71461057957600080fd5b8063a4bc8dd51161012f578063ad1148cb11610114578063ad1148cb14610548578063bdacb30314610555578063c2c4c5c11461056857600080fd5b8063a4bc8dd514610505578063a875f4721461052857600080fd5b8063941d9f6511610160578063941d9f65146104cc578063948e25a2146104df5780639f8a835a146104f257600080fd5b80638da5cb5b1461049957806391519bda146104b957600080fd5b806342c92f6e1161022957806374ea0b98116101dd5780637c262871116101c25780637c262871146104755780638697256b1461047d5780638980f11f1461048657600080fd5b806374ea0b981461045a57806379ba50971461046d57600080fd5b806353a47bb71161020e57806353a47bb71461042957806356d9fff3146104495780636999ac931461045157600080fd5b806342c92f6e146103f657806350fe98ac1461040957600080fd5b806319aec6d21161028057806338359fc21161026557806338359fc21461039657806338803d49146103db5780633c6b16ab146103e357600080fd5b806319aec6d21461036b57806331ca208c1461037357600080fd5b80630d8ab459116102b15780630d8ab459146102fb57806314b30537146103235780631627540c1461035657600080fd5b80628cc262146102cc57806305cfb058146102f2575b600080fd5b6102df6102da3660046121e0565b610624565b6040519081526020015b60405180910390f35b6102df600f5481565b61030e6103093660046121e0565b610818565b604080519283526020830191909152016102e9565b6103466103313660046121e0565b60116020526000908152604090205460ff1681565b60405190151581526020016102e9565b6103696103643660046121e0565b610914565b005b6102df610a3a565b6103466103813660046121e0565b60156020526000908152604090205460ff1681565b6005546103b69073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102e9565b6102df610a58565b6103696103f13660046121fb565b610a9e565b6103696104043660046121e0565b610bf6565b6102df6104173660046121e0565b600e6020526000908152604090205481565b6001546103b69073ffffffffffffffffffffffffffffffffffffffff1681565b6102df610ced565b6102df60095481565b6103696104683660046121fb565b610cfb565b610369610e95565b6102df610fe0565b6102df60105481565b610369610494366004612214565b611201565b6000546103b69073ffffffffffffffffffffffffffffffffffffffff1681565b6103696104c736600461224c565b61131c565b6103696104da3660046121e0565b6113d6565b6103696104ed36600461227c565b6114cd565b6103696105003660046121e0565b6115a1565b6103466105133660046121e0565b600b6020526000908152604090205460ff1681565b6102df6105363660046121e0565b600d6020526000908152604090205481565b6016546103469060ff1681565b6103696105633660046121e0565b6115ad565b610369611697565b6102df60085481565b6006546103b69073ffffffffffffffffffffffffffffffffffffffff1681565b6102df6105a73660046121e0565b60136020526000908152604090205481565b6102df600a5481565b6004546103b69073ffffffffffffffffffffffffffffffffffffffff1681565b6102df60075481565b6102df6105f93660046121e0565b60126020526000908152604090205481565b6102df6116a2565b6102df600c5481565b6103696116c2565b73ffffffffffffffffffffffffffffffffffffffff811660009081526011602052604081205460ff1661065957506000919050565b60008061066584610818565b9092509050620f42408261072e5773ffffffffffffffffffffffffffffffffffffffff851660009081526014602052604090205482116106aa57506000949350505050565b73ffffffffffffffffffffffffffffffffffffffff85166000908152601460205260408120546106db908490611771565b73ffffffffffffffffffffffffffffffffffffffff871660009081526014602052604081205491925090610710904290611771565b905061072981610723620f4240856117bc565b90611871565b925050505b73ffffffffffffffffffffffffffffffffffffffff85166000908152601260205260408120548085111561076457809150610776565b610773600261072387846118b3565b91505b5073ffffffffffffffffffffffffffffffffffffffff86166000908152600e602052604090205461080e906108086107b9620f4240670de0b6b3a76400006122c8565b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600d6020526040902054610723908790610802906107fb906107f5610a58565b90611771565b88906117bc565b906117bc565b906118b3565b9695505050505050565b6003546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015260009283928392909116906370a0823190602401602060405180830381865afa15801561088f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b39190612305565b73ffffffffffffffffffffffffffffffffffffffff85166000908152601360205260409020549250905081158015906108ec5750814210155b156108fa576000925061090e565b81421061090a576000925061090e565b8092505b50915091565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201527f6f726d207468697320616374696f6e000000000000000000000000000000000060648201526084015b60405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22906020015b60405180910390a150565b6000610a53600a546009546117bc90919063ffffffff16565b905090565b600060105460001415610a6c5750600c5490565b610a53610a95601054610723670de0b6b3a76400006108026009546108026008546107f5610ced565b600c54906118b3565b336000908152600b602052604090205460ff16610b17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f53656e646572206e6f742077686974656c69737465640000000000000000000060448201526064016109b7565b600454610b3c9073ffffffffffffffffffffffffffffffffffffffff1633308461192c565b610b446116c2565b6007544210610b6357600a54610b5b908290611871565b600955610ba6565b600754600090610b739042611771565b90506000610b8c600954836117bc90919063ffffffff16565b600a54909150610ba09061072385846118b3565b60095550505b426008819055600a54610bb991906118b3565b6007556009546040805183815260208101929092527f6c07ee05dcf262f13abf9d87b846ee789d2f90fe991d495acd7d7fc109ee1f559101610a2f565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610c33575060065473ffffffffffffffffffffffffffffffffffffffff1633145b610c99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109b7565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff90911615179055565b6000610a53426007546119c7565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610d38575060065473ffffffffffffffffffffffffffffffffffffffff1633145b610d9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109b7565b6007541580610dae575060075442115b610e60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605660248201527f50726576696f7573207969656c6420706572696f64206d75737420626520636f60448201527f6d706c657465206265666f7265206368616e67696e672074686520647572617460648201527f696f6e20666f7220746865206e657720706572696f6400000000000000000000608482015260a4016109b7565b600a8190556040518181527fce653f06b9044b00e7d9d01b9b4228e84812092cb6a38371889bef19370d21f790602001610a2f565b60015473ffffffffffffffffffffffffffffffffffffffff163314610f3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527f2063616e20616363657074206f776e657273686970000000000000000000000060648201526084016109b7565b6000546001546040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff841617909155169055565b600060028054141561104e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109b7565b6002805560165460ff16156110bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5969656c6420636f6c6c656374696f6e2069732070617573656400000000000060448201526064016109b7565b336110c9816119dd565b3360009081526015602052604090205460ff1615611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4164647265737320686173206265656e20677265796c6973746564000000000060448201526064016109b7565b336000908152600e6020526040902054915081156111e657336000818152600e60205260408120556005546111919173ffffffffffffffffffffffffffffffffffffffff9091169084611c4b565b6005546040805184815273ffffffffffffffffffffffffffffffffffffffff909216602083015233917f3998039806f6db7e5d83a5371638cc47dd2e9ae500d5d561d95ec6381f53e3cd910160405180910390a25b50336000908152601460205260409020429055600160025590565b60005473ffffffffffffffffffffffffffffffffffffffff1633148061123e575060065473ffffffffffffffffffffffffffffffffffffffff1633145b6112a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109b7565b6000546112c990839073ffffffffffffffffffffffffffffffffffffffff1683611c4b565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f55350610fe57096d8c0ffa30beede987326bccfcb0b4415804164d0dd50ce8b1910160405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611359575060065473ffffffffffffffffffffffffffffffffffffffff1633145b6113bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109b7565b600982905580156113d2576113d26116c2565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611413575060065473ffffffffffffffffffffffffffffffffffffffff1633145b611479576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109b7565b73ffffffffffffffffffffffffffffffffffffffff16600090815260156020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff90911615179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633148061150a575060065473ffffffffffffffffffffffffffffffffffffffff1633145b611570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109b7565b601680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6115aa816119dd565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314806115ea575060065473ffffffffffffffffffffffffffffffffffffffff1633145b611650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109b7565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6116a0336119dd565b565b6000610a53601054610723620f4240600f546117bc90919063ffffffff16565b6116ca610a58565b600c55600354604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216916318160ddd916004808201926020929091908290030181865afa15801561173d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117619190612305565b60105561176c610ced565b600855565b60006117b383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611dbb565b90505b92915050565b6000826117cb575060006117b6565b60006117d783856122c8565b9050826117e4858361231e565b146117b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60448201527f770000000000000000000000000000000000000000000000000000000000000060648201526084016109b7565b60006117b383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611e11565b6000806118c08385612359565b9050838110156117b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016109b7565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526119c1908590611e59565b50505050565b60008183106119d657816117b3565b5090919050565b6119e56116c2565b6119ee81611f6a565b73ffffffffffffffffffffffffffffffffffffffff8181166000818152601260205260408082205460035491517f70a0823100000000000000000000000000000000000000000000000000000000815260048101949094529391929116906370a0823190602401602060405180830381865afa158015611a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a969190612305565b73ffffffffffffffffffffffffffffffffffffffff84811660008181526012602052604080822085905560035490517fcbf9fe5f0000000000000000000000000000000000000000000000000000000081526004810193909352939450929091169063cbf9fe5f906024016040805180830381865afa158015611b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b419190612371565b60208082015173ffffffffffffffffffffffffffffffffffffffff8716600090815260139092526040909120559050828210611b9c576000611b838385611771565b600f54909150611b9390826118b3565b600f5550611bbd565b6000611ba88484611771565b600f54909150611bb89082611771565b600f55505b73ffffffffffffffffffffffffffffffffffffffff841660009081526011602052604090205460ff166119c15773ffffffffffffffffffffffffffffffffffffffff8416600090815260116020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556014909152902042905550505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691611ce29190612423565b6000604051808303816000865af19150503d8060008114611d1f576040519150601f19603f3d011682016040523d82523d6000602084013e611d24565b606091505b5091509150818015611d4e575080511580611d4e575080806020019051810190611d4e919061243f565b611db4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016109b7565b5050505050565b60008184841115611df9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b7919061245c565b506000611e0684866124ad565b9150505b9392505050565b60008183611e4c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b7919061245c565b506000611e06848661231e565b6000611ebb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611fcd9092919063ffffffff16565b805190915015611f655780806020019051810190611ed9919061243f565b611f65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016109b7565b505050565b73ffffffffffffffffffffffffffffffffffffffff8116156115aa576000611f9182610624565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600e6020908152604080832093909355600c54600d909152919020555050565b6060611fdc8484600085611fe4565b949350505050565b606082471015612076576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016109b7565b843b6120de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109b7565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516121079190612423565b60006040518083038185875af1925050503d8060008114612144576040519150601f19603f3d011682016040523d82523d6000602084013e612149565b606091505b5091509150612159828286612164565b979650505050505050565b60608315612173575081611e0a565b8251156121835782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b7919061245c565b803573ffffffffffffffffffffffffffffffffffffffff811681146121db57600080fd5b919050565b6000602082840312156121f257600080fd5b6117b3826121b7565b60006020828403121561220d57600080fd5b5035919050565b6000806040838503121561222757600080fd5b612230836121b7565b946020939093013593505050565b80151581146115aa57600080fd5b6000806040838503121561225f57600080fd5b8235915060208301356122718161223e565b809150509250929050565b60006020828403121561228e57600080fd5b81356117b38161223e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561230057612300612299565b500290565b60006020828403121561231757600080fd5b5051919050565b600082612354577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000821982111561236c5761236c612299565b500190565b60006040828403121561238357600080fd5b6040516040810181811067ffffffffffffffff821117156123cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528251600f81900b81146123e257600080fd5b81526020928301519281019290925250919050565b60005b838110156124125781810151838201526020016123fa565b838111156119c15750506000910152565b600082516124358184602087016123f7565b9190910192915050565b60006020828403121561245157600080fd5b81516117b38161223e565b602081526000825180602084015261247b8160408501602087016123f7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000828210156124bf576124bf612299565b50039056fea264697066735822122045efef6dc5e20f60ba5111f00077efa57cc89f020fc88006397b0fc158f95a1964736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102c75760003560e01c80638da5cb5b1161017b578063c8f33c91116100d8578063ebe2b12b1161008c578063fc939bb111610071578063fc939bb11461060b578063ff7cc34a14610613578063fff6cae91461061c57600080fd5b8063ebe2b12b146105e2578063f8b67dc3146105eb57600080fd5b8063de02bab7116100bd578063de02bab714610599578063e172cf21146105b9578063e9218ff6146105c257600080fd5b8063c8f33c9114610570578063dc6663c71461057957600080fd5b8063a4bc8dd51161012f578063ad1148cb11610114578063ad1148cb14610548578063bdacb30314610555578063c2c4c5c11461056857600080fd5b8063a4bc8dd514610505578063a875f4721461052857600080fd5b8063941d9f6511610160578063941d9f65146104cc578063948e25a2146104df5780639f8a835a146104f257600080fd5b80638da5cb5b1461049957806391519bda146104b957600080fd5b806342c92f6e1161022957806374ea0b98116101dd5780637c262871116101c25780637c262871146104755780638697256b1461047d5780638980f11f1461048657600080fd5b806374ea0b981461045a57806379ba50971461046d57600080fd5b806353a47bb71161020e57806353a47bb71461042957806356d9fff3146104495780636999ac931461045157600080fd5b806342c92f6e146103f657806350fe98ac1461040957600080fd5b806319aec6d21161028057806338359fc21161026557806338359fc21461039657806338803d49146103db5780633c6b16ab146103e357600080fd5b806319aec6d21461036b57806331ca208c1461037357600080fd5b80630d8ab459116102b15780630d8ab459146102fb57806314b30537146103235780631627540c1461035657600080fd5b80628cc262146102cc57806305cfb058146102f2575b600080fd5b6102df6102da3660046121e0565b610624565b6040519081526020015b60405180910390f35b6102df600f5481565b61030e6103093660046121e0565b610818565b604080519283526020830191909152016102e9565b6103466103313660046121e0565b60116020526000908152604090205460ff1681565b60405190151581526020016102e9565b6103696103643660046121e0565b610914565b005b6102df610a3a565b6103466103813660046121e0565b60156020526000908152604090205460ff1681565b6005546103b69073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102e9565b6102df610a58565b6103696103f13660046121fb565b610a9e565b6103696104043660046121e0565b610bf6565b6102df6104173660046121e0565b600e6020526000908152604090205481565b6001546103b69073ffffffffffffffffffffffffffffffffffffffff1681565b6102df610ced565b6102df60095481565b6103696104683660046121fb565b610cfb565b610369610e95565b6102df610fe0565b6102df60105481565b610369610494366004612214565b611201565b6000546103b69073ffffffffffffffffffffffffffffffffffffffff1681565b6103696104c736600461224c565b61131c565b6103696104da3660046121e0565b6113d6565b6103696104ed36600461227c565b6114cd565b6103696105003660046121e0565b6115a1565b6103466105133660046121e0565b600b6020526000908152604090205460ff1681565b6102df6105363660046121e0565b600d6020526000908152604090205481565b6016546103469060ff1681565b6103696105633660046121e0565b6115ad565b610369611697565b6102df60085481565b6006546103b69073ffffffffffffffffffffffffffffffffffffffff1681565b6102df6105a73660046121e0565b60136020526000908152604090205481565b6102df600a5481565b6004546103b69073ffffffffffffffffffffffffffffffffffffffff1681565b6102df60075481565b6102df6105f93660046121e0565b60126020526000908152604090205481565b6102df6116a2565b6102df600c5481565b6103696116c2565b73ffffffffffffffffffffffffffffffffffffffff811660009081526011602052604081205460ff1661065957506000919050565b60008061066584610818565b9092509050620f42408261072e5773ffffffffffffffffffffffffffffffffffffffff851660009081526014602052604090205482116106aa57506000949350505050565b73ffffffffffffffffffffffffffffffffffffffff85166000908152601460205260408120546106db908490611771565b73ffffffffffffffffffffffffffffffffffffffff871660009081526014602052604081205491925090610710904290611771565b905061072981610723620f4240856117bc565b90611871565b925050505b73ffffffffffffffffffffffffffffffffffffffff85166000908152601260205260408120548085111561076457809150610776565b610773600261072387846118b3565b91505b5073ffffffffffffffffffffffffffffffffffffffff86166000908152600e602052604090205461080e906108086107b9620f4240670de0b6b3a76400006122c8565b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600d6020526040902054610723908790610802906107fb906107f5610a58565b90611771565b88906117bc565b906117bc565b906118b3565b9695505050505050565b6003546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015260009283928392909116906370a0823190602401602060405180830381865afa15801561088f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b39190612305565b73ffffffffffffffffffffffffffffffffffffffff85166000908152601360205260409020549250905081158015906108ec5750814210155b156108fa576000925061090e565b81421061090a576000925061090e565b8092505b50915091565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201527f6f726d207468697320616374696f6e000000000000000000000000000000000060648201526084015b60405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22906020015b60405180910390a150565b6000610a53600a546009546117bc90919063ffffffff16565b905090565b600060105460001415610a6c5750600c5490565b610a53610a95601054610723670de0b6b3a76400006108026009546108026008546107f5610ced565b600c54906118b3565b336000908152600b602052604090205460ff16610b17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f53656e646572206e6f742077686974656c69737465640000000000000000000060448201526064016109b7565b600454610b3c9073ffffffffffffffffffffffffffffffffffffffff1633308461192c565b610b446116c2565b6007544210610b6357600a54610b5b908290611871565b600955610ba6565b600754600090610b739042611771565b90506000610b8c600954836117bc90919063ffffffff16565b600a54909150610ba09061072385846118b3565b60095550505b426008819055600a54610bb991906118b3565b6007556009546040805183815260208101929092527f6c07ee05dcf262f13abf9d87b846ee789d2f90fe991d495acd7d7fc109ee1f559101610a2f565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610c33575060065473ffffffffffffffffffffffffffffffffffffffff1633145b610c99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109b7565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff90911615179055565b6000610a53426007546119c7565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610d38575060065473ffffffffffffffffffffffffffffffffffffffff1633145b610d9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109b7565b6007541580610dae575060075442115b610e60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605660248201527f50726576696f7573207969656c6420706572696f64206d75737420626520636f60448201527f6d706c657465206265666f7265206368616e67696e672074686520647572617460648201527f696f6e20666f7220746865206e657720706572696f6400000000000000000000608482015260a4016109b7565b600a8190556040518181527fce653f06b9044b00e7d9d01b9b4228e84812092cb6a38371889bef19370d21f790602001610a2f565b60015473ffffffffffffffffffffffffffffffffffffffff163314610f3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527f2063616e20616363657074206f776e657273686970000000000000000000000060648201526084016109b7565b6000546001546040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff841617909155169055565b600060028054141561104e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109b7565b6002805560165460ff16156110bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5969656c6420636f6c6c656374696f6e2069732070617573656400000000000060448201526064016109b7565b336110c9816119dd565b3360009081526015602052604090205460ff1615611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4164647265737320686173206265656e20677265796c6973746564000000000060448201526064016109b7565b336000908152600e6020526040902054915081156111e657336000818152600e60205260408120556005546111919173ffffffffffffffffffffffffffffffffffffffff9091169084611c4b565b6005546040805184815273ffffffffffffffffffffffffffffffffffffffff909216602083015233917f3998039806f6db7e5d83a5371638cc47dd2e9ae500d5d561d95ec6381f53e3cd910160405180910390a25b50336000908152601460205260409020429055600160025590565b60005473ffffffffffffffffffffffffffffffffffffffff1633148061123e575060065473ffffffffffffffffffffffffffffffffffffffff1633145b6112a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109b7565b6000546112c990839073ffffffffffffffffffffffffffffffffffffffff1683611c4b565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f55350610fe57096d8c0ffa30beede987326bccfcb0b4415804164d0dd50ce8b1910160405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611359575060065473ffffffffffffffffffffffffffffffffffffffff1633145b6113bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109b7565b600982905580156113d2576113d26116c2565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611413575060065473ffffffffffffffffffffffffffffffffffffffff1633145b611479576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109b7565b73ffffffffffffffffffffffffffffffffffffffff16600090815260156020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff90911615179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633148061150a575060065473ffffffffffffffffffffffffffffffffffffffff1633145b611570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109b7565b601680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6115aa816119dd565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314806115ea575060065473ffffffffffffffffffffffffffffffffffffffff1633145b611650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206f776e6572206f722074696d656c6f636b000000000000000000000060448201526064016109b7565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6116a0336119dd565b565b6000610a53601054610723620f4240600f546117bc90919063ffffffff16565b6116ca610a58565b600c55600354604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216916318160ddd916004808201926020929091908290030181865afa15801561173d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117619190612305565b60105561176c610ced565b600855565b60006117b383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611dbb565b90505b92915050565b6000826117cb575060006117b6565b60006117d783856122c8565b9050826117e4858361231e565b146117b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60448201527f770000000000000000000000000000000000000000000000000000000000000060648201526084016109b7565b60006117b383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611e11565b6000806118c08385612359565b9050838110156117b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016109b7565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526119c1908590611e59565b50505050565b60008183106119d657816117b3565b5090919050565b6119e56116c2565b6119ee81611f6a565b73ffffffffffffffffffffffffffffffffffffffff8181166000818152601260205260408082205460035491517f70a0823100000000000000000000000000000000000000000000000000000000815260048101949094529391929116906370a0823190602401602060405180830381865afa158015611a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a969190612305565b73ffffffffffffffffffffffffffffffffffffffff84811660008181526012602052604080822085905560035490517fcbf9fe5f0000000000000000000000000000000000000000000000000000000081526004810193909352939450929091169063cbf9fe5f906024016040805180830381865afa158015611b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b419190612371565b60208082015173ffffffffffffffffffffffffffffffffffffffff8716600090815260139092526040909120559050828210611b9c576000611b838385611771565b600f54909150611b9390826118b3565b600f5550611bbd565b6000611ba88484611771565b600f54909150611bb89082611771565b600f55505b73ffffffffffffffffffffffffffffffffffffffff841660009081526011602052604090205460ff166119c15773ffffffffffffffffffffffffffffffffffffffff8416600090815260116020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556014909152902042905550505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691611ce29190612423565b6000604051808303816000865af19150503d8060008114611d1f576040519150601f19603f3d011682016040523d82523d6000602084013e611d24565b606091505b5091509150818015611d4e575080511580611d4e575080806020019051810190611d4e919061243f565b611db4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016109b7565b5050505050565b60008184841115611df9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b7919061245c565b506000611e0684866124ad565b9150505b9392505050565b60008183611e4c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b7919061245c565b506000611e06848661231e565b6000611ebb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611fcd9092919063ffffffff16565b805190915015611f655780806020019051810190611ed9919061243f565b611f65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016109b7565b505050565b73ffffffffffffffffffffffffffffffffffffffff8116156115aa576000611f9182610624565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600e6020908152604080832093909355600c54600d909152919020555050565b6060611fdc8484600085611fe4565b949350505050565b606082471015612076576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016109b7565b843b6120de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109b7565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516121079190612423565b60006040518083038185875af1925050503d8060008114612144576040519150601f19603f3d011682016040523d82523d6000602084013e612149565b606091505b5091509150612159828286612164565b979650505050505050565b60608315612173575081611e0a565b8251156121835782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b7919061245c565b803573ffffffffffffffffffffffffffffffffffffffff811681146121db57600080fd5b919050565b6000602082840312156121f257600080fd5b6117b3826121b7565b60006020828403121561220d57600080fd5b5035919050565b6000806040838503121561222757600080fd5b612230836121b7565b946020939093013593505050565b80151581146115aa57600080fd5b6000806040838503121561225f57600080fd5b8235915060208301356122718161223e565b809150509250929050565b60006020828403121561228e57600080fd5b81356117b38161223e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561230057612300612299565b500290565b60006020828403121561231757600080fd5b5051919050565b600082612354577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000821982111561236c5761236c612299565b500190565b60006040828403121561238357600080fd5b6040516040810181811067ffffffffffffffff821117156123cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528251600f81900b81146123e257600080fd5b81526020928301519281019290925250919050565b60005b838110156124125781810151838201526020016123fa565b838111156119c15750506000910152565b600082516124358184602087016123f7565b9190910192915050565b60006020828403121561245157600080fd5b81516117b38161223e565b602081526000825180602084015261247b8160408501602087016123f7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000828210156124bf576124bf612299565b50039056fea264697066735822122045efef6dc5e20f60ba5111f00077efa57cc89f020fc88006397b0fc158f95a1964736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3196,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3198,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "nominatedOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4757,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3386,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "veMPH",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IveMPH)1548"
      },
      {
        "astId": 3389,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "emittedToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ERC20)594"
      },
      {
        "astId": 3391,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "emitted_token_address",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3393,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "timelock_address",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3398,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "periodFinish",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3400,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3402,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "yieldRate",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3405,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "yieldDuration",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3409,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "reward_notifiers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3412,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "yieldPerVeMPHStored",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3416,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "userYieldPerTokenPaid",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3420,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "yields",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3423,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "totalVeMPHParticipating",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3426,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "totalVeMPHSupplyStored",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3430,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "userIsInitialized",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3434,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "userVeMPHCheckpointed",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3438,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "userVeMPHEndpointCheckpointed",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3442,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "lastRewardClaimTime",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3446,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "greylist",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3449,
        "contract": "contracts/Staking/veMPHYieldDistributorV4.sol:veMPHYieldDistributorV4",
        "label": "yieldCollectionPaused",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)594": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IveMPH)1548": {
        "encoding": "inplace",
        "label": "contract IveMPH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
